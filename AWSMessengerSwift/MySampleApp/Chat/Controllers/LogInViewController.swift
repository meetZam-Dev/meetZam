//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.1
//
//

import UIKit
import AWSMobileHubHelper

class LogInViewController: UIViewController {
    @IBOutlet weak var anchorView: UIView!
    
    @IBOutlet weak var facebookButton: UIButton!
    
    @IBOutlet weak var googleButton: UIButton!
    
    
    // Support code for custom sign-in provider UI.
    @IBOutlet weak var customProviderButton: UIButton!
    @IBOutlet weak var customCreateAccountButton: UIButton!
    @IBOutlet weak var customForgotPasswordButton: UIButton!
    @IBOutlet weak var customUserIdField: UITextField!
    @IBOutlet weak var customPasswordField: UITextField!
    @IBOutlet weak var leftHorizontalBar: UIView!
    @IBOutlet weak var rightHorizontalBar: UIView!
    @IBOutlet weak var orSignInWithLabel: UIView!
    
    
    var didSignInObserver: AnyObject!
    
    let userServices = UserDynamoDBServices();
    
    var activityIndicator:UIActivityIndicatorView?
    
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("Sign In Loading.")
        
        didSignInObserver =  NotificationCenter.default.addObserver(forName: NSNotification.Name.AWSIdentityManagerDidSignIn,
                                                                                     object: AWSIdentityManager.defaultIdentityManager(),
                                                                                     queue: OperationQueue.main,
                                                                                     using: {(note: Notification) -> Void in
                                                                                        // perform successful login actions here
        })
        
        // Facebook UI Setup
        facebookButton.addTarget(self, action: #selector(LogInViewController.handleFacebookLogin), for: .touchUpInside)
        let facebookButtonImage: UIImage? = UIImage(named: "FacebookButton")
        if let facebookButtonImage = facebookButtonImage{
            facebookButton.setImage(facebookButtonImage, for: UIControlState())
        } else {
            print("Facebook button image unavailable. We're hiding this button.")
            facebookButton.isHidden = true
        }
        view.addConstraint(NSLayoutConstraint(item: facebookButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForFacebook(), attribute: .bottom, multiplier: 1, constant: 8.0))
        // Google UI Setup
        googleButton.addTarget(self, action: #selector(LogInViewController.handleGoogleLogin), for: .touchUpInside)
        let googleButtonImage: UIImage? = UIImage(named: "GoogleButton")
        if let googleButtonImage = googleButtonImage {
            googleButton.setImage(googleButtonImage, for: UIControlState())
        } else {
            print("Google button image unavailable. We're hiding this button.")
            googleButton.isHidden = true
        }
        view.addConstraint(NSLayoutConstraint(item: googleButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForGoogle(), attribute: .bottom, multiplier: 1, constant: 8.0))
        customProviderButton.removeFromSuperview()
        customCreateAccountButton.removeFromSuperview()
        customForgotPasswordButton.removeFromSuperview()
        customUserIdField.removeFromSuperview()
        customPasswordField.removeFromSuperview()
        leftHorizontalBar.removeFromSuperview()
        rightHorizontalBar.removeFromSuperview()
        orSignInWithLabel.removeFromSuperview()
        customProviderButton.setImage(UIImage(named: "LoginButton"), for: UIControlState())
    }
    
    deinit {
        NotificationCenter.default.removeObserver(didSignInObserver)
    }
    
    func dimissController() {
        self.dismiss(animated: true, completion: nil)
    }
    
    
    func showChatRoom() {
        
        DispatchQueue.main.async(execute: {
            
            let storyboard = UIStoryboard(name: "Chat", bundle: nil)
            let chatTableViewController = storyboard.instantiateInitialViewController()
            
            
            UIApplication.shared.keyWindow?.rootViewController =  chatTableViewController
            
        })
    }
    
    // MARK: - Utility Methods
    
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        
        activityIndicator = UIActivityIndicatorView()
        
        AWSIdentityManager.defaultIdentityManager().loginWithSign(signInProvider, completionHandler: {(result: AnyObject?, error: NSError?) -> Void in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                self.activityIndicator?.startAnimationOnTop()
                AWSPushManager.defaultPushManager().registerForPushNotifications()
                if UserProfile.getDeviceArn() == nil {
                    
                    let delayTime = DispatchTime.now() + Double(Int64(3 * Double(NSEC_PER_SEC))) / Double(NSEC_PER_SEC)
                    DispatchQueue.main.asyncAfter(deadline: delayTime) {
                        self.checkPhoneNo()
                    }
                }else {
                    self.checkPhoneNo()
                }
                
                
            }
            print("result = \(result), error = \(error)")
        } as! (Any?, Error?) -> Void)
    }
    
    
    func checkPhoneNo() {
        
        if (AWSIdentityManager.defaultIdentityManager().isLoggedIn) {
            
            
            
            self.userServices.isUserPhoneNoExist().continue({ (task) -> AnyObject? in
                
                
                if let _userProfile = task.result?.firstObject as? UserProfile {
                    
                    
                    if let _deviceArn = UserProfile.getDeviceArn() {
                        
                        return self.userServices.updatePushTargetArn(_userProfile,deviceArn: _deviceArn)
                        
                    }else{
                        
                        
                        
                        self.showChatRoom()
                        
                        
                        
                    }
                    
                    
                }else{
                    
                    
                    
                    DispatchQueue.main.async(execute: {
                        
                        
                        self.showAlertForEnterPhoneNo(false)
                        
                    })
                    
                    
                }
                 self.activityIndicator?.stopAnimationOnTop()
                return nil
                
            }).continue({ (task) -> AnyObject? in
                
                
                if let _result = task.result {
                    
                    print(_result)
                    
                    
                    
                    
                    self.showChatRoom()
                    
                }
                
                return nil
            })
            
            
            
            
            //            self.userServices.isUserPhoneNoExist({ (isExist) in
            //
            //
            //
            //
            //                dispatch_async(dispatch_get_main_queue(),{
            //
            //
            //                    if isExist {
            //
            //                        self.dismissViewControllerAnimated(true, completion: nil)
            //
            //                    }else {
            //
            //                        self.showAlertForEnterPhoneNo(false)
            //
            //                    }
            //
            //                })
            //
            //
            //
            //
            //            })
        }
        
    }
    
    func showAlertForEnterPhoneNo(_ isShowInValidMessage:Bool)  {
        
        
        //1. Create the alert controller.
        let alert = UIAlertController(title: "Your phone number is required",
                                      message: (isShowInValidMessage) ? "you entered invalid phone no." :nil,
                                      preferredStyle: .alert)
        
        //2. Add the text field. You can configure it however you need.
        alert.addTextField(configurationHandler: { (textField) -> Void in
            textField.placeholder = "Please enter your phone No."
            textField.keyboardType = .phonePad
        })
        
        //3. Grab the value from the text field, and print it when the user clicks OK.
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { (action) -> Void in
            
            
            if let textField = alert.textFields?.first as UITextField!, textField.text!.characters.count > 10 {
                
                
                
                self.userServices.saveUserPhoneNo(textField.text!,
                    completion: { (errorMessage) in
                         self.activityIndicator?.stopAnimationOnTop()
                        self.showChatRoom()
                })
                
                
                
            }
            else
            {
                self.showAlertForEnterPhoneNo(true)
                
            }
            
            
            
            
            
            
        }))
        
        // 4. Present the alert.
        self.present(alert, animated: true, completion: nil)
    }
    
    
    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
        print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }
    
    // MARK: - IBActions
    func handleFacebookLogin() {
        
        let eventClient = AWSMobileClient.sharedInstance.mobileAnalytics.eventClient
        let event = eventClient?.createEvent(withEventType: "SignIn")
        event?.addAttribute("Facebook", forKey: "LoggedIn")
        eventClient?.record(event)
        
        DispatchQueue.global(priority: DispatchQueue.GlobalQueuePriority.background).async(execute: {() -> Void in
            eventClient?.submitEvents()
        })
        
        
        handleLoginWithSignInProvider(AWSFacebookSignInProvider.sharedInstance())
    }
    
    
    func handleGoogleLogin() {
        
        
        
        let eventClient = AWSMobileClient.sharedInstance.mobileAnalytics.eventClient
        let event = eventClient?.createEvent(withEventType: "SignIn")
        event?.addAttribute("Google+", forKey: "LoggedIn")
        eventClient?.record(event)
        
        DispatchQueue.global(priority: DispatchQueue.GlobalQueuePriority.background).async(execute: {() -> Void in
            eventClient?.submitEvents()
        })
        
        
        
        handleLoginWithSignInProvider(AWSGoogleSignInProvider.sharedInstance())
    }
    
    func anchorViewForFacebook() -> UIView {
        return anchorView
    }
    
    func anchorViewForGoogle() -> UIView {
        return facebookButton
        
    }
}
