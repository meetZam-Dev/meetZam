//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

import UIKit
import AWSMobileHubHelper
import FBSDKLoginKit

class SignInViewController: UIViewController {
    //@IBOutlet weak var anchorView: UIView!

    @IBOutlet weak var facebookButton: UIButton!

//// Support code for Google provider UI.
//    @IBOutlet weak var googleButton: UIButton!
    
    var didSignInObserver: AnyObject!
    
    // Change status bar type to default.
    override func viewDidAppear(_ animated: Bool) {
        UIApplication.shared.statusBarStyle = .default
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
         print("Sign In Loading.")
        
            didSignInObserver =  NotificationCenter.default.addObserver(
                forName: NSNotification.Name.AWSIdentityManagerDidSignIn,
                object: AWSIdentityManager.default(),
                queue: OperationQueue.main,
                using: {(note: Notification) -> Void in
                    // perform successful login actions here
            })

            // Facebook login permissions can be optionally set, but must be set
            // before user authenticates.
            AWSFacebookSignInProvider.sharedInstance().setPermissions(["public_profile"]);
                
            // Facebook login behavior can be optionally set, but must be set
            // before user authenticates.
            // AWSFacebookSignInProvider.sharedInstance().setLoginBehavior(FBSDKLoginBehavior.Web.rawValue)
                
            // Facebook UI Setup
            facebookButton.addTarget(self,
                action: #selector(SignInViewController.handleFacebookLogin),
                for: .touchUpInside)
            let facebookButtonImage: UIImage? = UIImage(named: "Facebook Login")
            if let facebookButtonImage = facebookButtonImage{
                facebookButton.setImage(facebookButtonImage, for: UIControlState())
            }
            else {
                print("Facebook button image unavailable. We're hiding this button.")
                facebookButton.isHidden = true
            }
        
    }
    
    deinit {
        NotificationCenter.default.removeObserver(didSignInObserver)
    }
    
    func dimissController() {
        self.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Utility Methods
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        AWSIdentityManager.default().login(
            signInProvider: signInProvider,
            completionHandler: {(result: Any?, error: Error?) in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                DispatchQueue.main.async(execute: {
                    // ======================================================================================================
                    // Original dismiss
                    self.presentingViewController?.dismiss(animated: true, completion: { _ in
                        let mainVC = UIApplication.shared.keyWindow?.rootViewController
                        if mainVC is MainViewController {
//                            mainVC?.viewDidLoad()
                            let tabBarHome = (mainVC as! MainViewController).viewControllers?.first
                            if tabBarHome is TabBarHomeViewController {
                                tabBarHome?.viewDidLoad()
                            }
                        }
                    })
                })
                
                
            }
            print("result = \(result), error = \(error)")
        })
    }

    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
         print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }

    // MARK: - IBActions
    func handleFacebookLogin() {
        let provider = AWSFacebookSignInProvider.sharedInstance()
        provider.setLoginBehavior(FBSDKLoginBehavior.web.rawValue)
        
        handleLoginWithSignInProvider(AWSFacebookSignInProvider.sharedInstance())
    }
    
    
}
