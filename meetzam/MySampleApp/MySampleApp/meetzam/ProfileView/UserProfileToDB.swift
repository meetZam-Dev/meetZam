//
//  UserProfileToDB.swift
//  MySampleApp
//
//  Created by Rainy on 2017/2/26.
//  update:bug fixed related to movie count in saving edited profile
//  
//  add device in line: 104, 204, 278, 475, 619
//  testing method in line 426
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
import Foundation
import UIKit
import AWSDynamoDB
import AWSS3

import AWSMobileHubHelper

class UserProfileToDB: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var userId: String?
    var displayName: String?
    var bio: String?
    var age: String?
    var gender: String?
    var region: String?
    var email: String?
    var currentLikedMovie = Set<String>()
    var movieCount: NSNumber?
    var likedUsers = Set<String>()
    var matchedUsers = Set<String>()
    var device: String?
    
    class func dynamoDBTableName() -> String {
        
        return "meetzam-mobilehub-1569925313-UserProfile"
    }
    
    class func hashKeyAttribute() -> String {
        
        return "userId"
    }
    
    
    // Ryan: check first time user ID
    func isUserIDinTable(_userId: String) -> Bool {
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        
        let mapper = AWSDynamoDBObjectMapper.default()
        var result: Bool = false
        var userIDInTable: Array = [String]()
        let scanExpression = AWSDynamoDBScanExpression()
        mapper.scan(UserProfileToDB.self, expression: scanExpression).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as NSError? {
                print("The request failed. Error: \(error)")
            } else if let allUsers = task.result {
                for user in allUsers.items as! [UserProfileToDB] {
                    userIDInTable.append(user.userId!)
                }
            }
            if (userIDInTable.contains(_userId)) {
                print("found user in the table")
                result = true
            }
            return nil
        }).waitUntilFinished()
        return result
    }
    
    //JUNPU: fixed busy waiting
    func insertProfile(_userId: String, _displayName: String, _bio: String, _age: String, _gender: String, _region: String, _email: String) {
        print("===== insertProfile =====")
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        let mapper = AWSDynamoDBObjectMapper.default()
        let userProfile = UserProfileToDB()
        var result: Bool = false
        var userIDInTable: Array = [String]()
        let scanExpression = AWSDynamoDBScanExpression()
        mapper.scan(UserProfileToDB.self, expression: scanExpression).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("The request failed. Error: \(error)")
            } else if let allUsers = task.result {
                for user in allUsers.items as! [UserProfileToDB] {
                    userIDInTable.append(user.userId!)
                }
            }
            if (userIDInTable.contains(_userId)) {
                print("found user in the table")
                result = true
            }
            return nil
        }).continueWith(block: { (task:AWSTask<AnyObject>) -> Any? in
            if result == false {
                print("Error: Can not find the user in the table.")
                return nil
            }
            print("now continue to insertProfile")
            mapper.load(UserProfileToDB.self, hashKey: _userId, rangeKey: nil).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
                if let error = task.error as? NSError {
                    print("InsertError: \(error)")
                } else if let user_profile_addTo = task.result as? UserProfileToDB {
                    userProfile?.currentLikedMovie=user_profile_addTo.currentLikedMovie
                    // if the user does not have any liked movies
                    if (user_profile_addTo.currentLikedMovie.count == 0)
                    {
                        userProfile?.currentLikedMovie.insert("mushroom13")
                    }
                    userProfile?.likedUsers = user_profile_addTo.likedUsers
                    if (user_profile_addTo.likedUsers.count == 0)
                    {
                        userProfile?.likedUsers.insert("mushroom13")
                    }
                    userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                    if (user_profile_addTo.matchedUsers.count == 0)
                    {
                        userProfile?.matchedUsers.insert("mushroom13")
                    }
                    userProfile?.movieCount = user_profile_addTo.movieCount
                    userProfile?.userId=user_profile_addTo.userId
                    userProfile?.device=user_profile_addTo.device
                    userProfile?.userId  = _userId
                    userProfile?.displayName = _displayName
                    userProfile?.bio = _bio
                    userProfile?.age = _age
                    userProfile?.gender = _gender
                    userProfile?.region = _region
                    userProfile?.email = _email
                    mapper.save(userProfile!)
                    print("insertProfile SUCCESS")
                }
                UIApplication.shared.isNetworkActivityIndicatorVisible = false
                return nil
            })
            return nil
        })
    }
    
    func getProfileForEdit(key: String, user_profile: UserProfileToDB?, displayname: UITextField!, bio: UITextField!, age: UITextField!, gender: UITextField!, region: UITextField!, email: UITextField!){
        print("===== getProfileForEdit =====")
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        let mapper = AWSDynamoDBObjectMapper.default()
        
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("Error: \(error)")
            } else if let user_profile = task.result as? UserProfileToDB {
                displayname.text = user_profile.displayName
                bio.text = user_profile.bio
                age.text = user_profile.age
                gender.text = user_profile.gender
                region.text = user_profile.region
                email.text = user_profile.email
                print("getProfileForEdit SUCCESS")
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })
        
    }
    
    func getProfileForDisplay(key: String, user_profile: UserProfileToDB?, displayname: UILabel!, bio: UILabel!){
        print("===== getProfileForDisplay =====")
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        let mapper = AWSDynamoDBObjectMapper.default()
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("Error: \(error)")
            } else if let user_profile = task.result as? UserProfileToDB {
                displayname.text = user_profile.displayName
                bio.text = user_profile.bio
                print("getProfileForDisplay SUCCESS")
                
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        }).continueWith(block: { (task:AWSTask!) -> AnyObject! in
            // DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT
            if let mainVC = UIApplication.shared.keyWindow?.rootViewController {
                if mainVC is MainViewController {
                    if let selectedVC = (mainVC as! MainViewController).selectedViewController {
                        if selectedVC is UINavigationController {
                            let finalVC = selectedVC as? UINavigationController
                            if finalVC?.visibleViewController is ProfileViewController {
                                (finalVC?.visibleViewController as! ProfileViewController).endAnimateWaiting()
                            }
                        }
                    }
                }
            }
            // DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT DO NOT DELETE IT
            return nil
        })
        
    }
    //JUNPU: fixed busy waiting
    func insertToCurrentLikedMovie(key: String, movieTitle: String)
    {
        print("===== insertToCurrentLikedMovie =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        let userProfile = UserProfileToDB()
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("InsertError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                userProfile?.userId=key
                userProfile?.displayName = user_profile_addTo.displayName
                userProfile?.bio = user_profile_addTo.bio
                userProfile?.age = user_profile_addTo.age
                userProfile?.gender = user_profile_addTo.gender
                userProfile?.region = user_profile_addTo.region
                userProfile?.device=user_profile_addTo.device
                userProfile?.currentLikedMovie = user_profile_addTo.currentLikedMovie
                if (user_profile_addTo.currentLikedMovie.count == 0)
                {
                    userProfile?.currentLikedMovie.insert("mushroom13")
                }
                userProfile?.likedUsers = user_profile_addTo.likedUsers
                if (user_profile_addTo.likedUsers.count == 0)
                {
                    userProfile?.likedUsers.insert("mushroom13")
                }
                userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                if (user_profile_addTo.matchedUsers.count == 0)
                {
                    userProfile?.matchedUsers.insert("mushroom13")
                }
                userProfile?.movieCount = user_profile_addTo.movieCount
                userProfile?.email = user_profile_addTo.email
                if (!((userProfile?.currentLikedMovie.contains(movieTitle))!))
                {
                    if (userProfile?.currentLikedMovie.count == 1 && (userProfile?.currentLikedMovie.contains("mushroom13"))!) {
                        //dummy exist
                        userProfile?.currentLikedMovie.removeAll()
                    }
                    userProfile?.currentLikedMovie.insert(movieTitle)
                    userProfile?.movieCount = userProfile?.currentLikedMovie.count as NSNumber?
                }
                for movie in (userProfile?.currentLikedMovie)! {
                    print("\(movie)")
                }
                mapper.save(userProfile!)
                print("insertToCurrentLikedMovie SUCCESS")
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })
    }
    
    //JUNPU: fixed busy waiting
    func deleteFromCurrentLikedMovie(key: String, movieTitle: String)
    {
        print("===== deleteFromCurrentLikedMovie =====")
        
        let mapper = AWSDynamoDBObjectMapper.default()
        
        let userProfile = UserProfileToDB()
        
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("InsertError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                userProfile?.userId=key
                userProfile?.displayName = user_profile_addTo.displayName
                userProfile?.bio = user_profile_addTo.bio
                userProfile?.age = user_profile_addTo.age
                userProfile?.gender = user_profile_addTo.gender
                userProfile?.region = user_profile_addTo.region
                userProfile?.device=user_profile_addTo.device
                userProfile?.likedUsers = user_profile_addTo.likedUsers
                if (user_profile_addTo.likedUsers.count == 0)
                {
                    userProfile?.likedUsers.insert("mushroom13")
                }
                userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                if (user_profile_addTo.matchedUsers.count == 0)
                {
                    userProfile?.matchedUsers.insert("mushroom13")
                }
                userProfile?.currentLikedMovie=user_profile_addTo.currentLikedMovie
                userProfile?.movieCount = user_profile_addTo.movieCount
                userProfile?.email = user_profile_addTo.email
                if (!((userProfile?.currentLikedMovie.contains(movieTitle))!))
                {
                    print("error: delete a movie not in user's liked movie list")
                }
                else {
                    _ = userProfile?.currentLikedMovie.remove(movieTitle)
                    userProfile?.movieCount = userProfile?.currentLikedMovie.count as NSNumber?
                    if (userProfile?.currentLikedMovie.count == 0) {
                        userProfile?.currentLikedMovie.insert("mushroom13")
                    }
                }
                mapper.save(userProfile!)
                print("deleteFromCurrentLikedMovie SUCCESS")
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })
    }
    
    
    func getLikedMovies(userId: String, user_profile: UserProfileToDB) {
        print("===== getLikedMovies =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        mapper.load(UserProfileToDB.self, hashKey: userId, rangeKey: nil).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("Error: \(error)")
            } else if let user_profile_temp = task.result as? UserProfileToDB {
                if (user_profile_temp.currentLikedMovie.count != 0 && user_profile_temp.movieCount == 0) {
                    print("dummy detected")
                }
                else {
                    user_profile.currentLikedMovie = user_profile_temp.currentLikedMovie
                    print(user_profile.currentLikedMovie.description)
                }
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })
    }
    
    //JUNPU: Fixed by .waitUntilFinished()
    func getPotentialUserIDs(key: String) -> [String]
    {
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        print("===== getPotentialUserIDs =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        var currentLikedMovie = Set<String>()
        let userProfile = UserProfileToDB()
        
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as NSError? {
                print("InsertError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                if (user_profile_addTo.currentLikedMovie.count != 0 && user_profile_addTo.movieCount == 0) {
                    print("dummy detected")
                }
                else {
                    currentLikedMovie=user_profile_addTo.currentLikedMovie
                }
                userProfile?.displayName=user_profile_addTo.displayName
            }
            return nil
        }).waitUntilFinished()

        print("     next step")
        var matchedUserIDs: Array = [String]()
        for movie in (currentLikedMovie) {
            print("You Liked \(movie)")
            mapper.load(SingleMovie.self, hashKey: movie, rangeKey: nil).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
                if let error = task.error as? NSError {
                    print("InsertError: \(error)")
                } else if let single_movie = task.result as? SingleMovie {
                    // put all the matched user ids to matchedUserIDs array
                    for likedUsers in single_movie.currentLikedUser
                    {
                        // if the id is not the user him/herself, add it to list
                        if (likedUsers != key && !matchedUserIDs.contains(likedUsers))
                        {
                            matchedUserIDs.append(likedUsers)
                        }
                    }
                }
                return nil
            }).waitUntilFinished()
        }
        print("getPotentialUserIDs SUCCESS")
        UIApplication.shared.isNetworkActivityIndicatorVisible = false
        return matchedUserIDs
    }
    
    //JUNPU: Fixed by .waitUntilFinished()
    func getUserProfileByIds(userIDs: [String]) -> [UserProfileToDB]
    {
        print("===== getUserProfileByIds =====")
        var matchedUserProfiles: Array = [UserProfileToDB]()
        let mapper = AWSDynamoDBObjectMapper.default()
        for userID in userIDs
        {
            print("userid is \(userID)")
            mapper.load(UserProfileToDB.self, hashKey: userID, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
                if let error = task.error as NSError? {
                    print("InsertError: \(error)")
                }
                else if let userProfile = task.result as? UserProfileToDB {
                    matchedUserProfiles.append(userProfile)
                }
                UIApplication.shared.isNetworkActivityIndicatorVisible = false
                return nil
            }).waitUntilFinished()
        }
        print("getUserProfileByIds SUCCESS")
        return matchedUserProfiles
    }
    
    func getAllUserIDs() -> [String]
    {
        print("===== getAllUserIDs =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        var allUserIDs: Array = [String]()
        mapper.scan(UserProfileToDB.self, expression: scanExpression).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let user_profile = task.result {
                for item in user_profile.items as! [UserProfileToDB] {
                    allUserIDs.append(item.userId!)
                }
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            if let error = task.error as NSError? {
                print("Error: \(error)")
                
            }
            return nil
        }).waitUntilFinished()
        return allUserIDs
    }
    
    //JUNPU: Fixed by .waitUntilFinished()
    func likeOneUser(key: String, likedUserID: String)
    {
        print("===== likeOneUser =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        let userProfile = UserProfileToDB()
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("InsertError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                userProfile?.userId=key
                userProfile?.displayName = user_profile_addTo.displayName
                userProfile?.bio = user_profile_addTo.bio
                userProfile?.age = user_profile_addTo.age
                userProfile?.gender = user_profile_addTo.gender
                userProfile?.region = user_profile_addTo.region
                userProfile?.device=user_profile_addTo.device
                
                userProfile?.currentLikedMovie=user_profile_addTo.currentLikedMovie
                // if the user does not have any liked movies
                if (user_profile_addTo.currentLikedMovie.count == 0)
                {
                    userProfile?.currentLikedMovie.insert("mushroom13")
                }
                userProfile?.likedUsers = user_profile_addTo.likedUsers
                if (user_profile_addTo.likedUsers.count == 0)
                {
                    userProfile?.likedUsers.insert("mushroom13")
                }
                userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                if (user_profile_addTo.matchedUsers.count == 0)
                {
                    userProfile?.matchedUsers.insert("mushroom13")
                }
                userProfile?.movieCount = user_profile_addTo.movieCount
                
                userProfile?.email = user_profile_addTo.email
        
            }
            return nil
        }).waitUntilFinished()

        if (!((userProfile?.likedUsers.contains(likedUserID))!))
        {
            if (userProfile?.likedUsers.count == 1 && (userProfile?.likedUsers.contains("mushroom13"))!) {
                //dummy exist
                userProfile?.likedUsers.removeAll()
            }
            userProfile?.likedUsers.insert(likedUserID)
        }
        UIApplication.shared.isNetworkActivityIndicatorVisible = false
        mapper.save(userProfile!)
        print("likeOneUser SUCCESS")
    }
    
    //JUNPU: Fixed by .waitUntilFinished()
    func getLikedUserIDs(key: String) -> [String]
    {
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        print("===== getLikedUserIDs =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        var likedUserArr = Set<String>()
        var likedUserIDs: Array = [String]()
        
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil).continueWith(executor: AWSExecutor.immediate(), block: { (task: AWSTask!) -> AnyObject! in
            if let error = task.error as NSError? {
                print("Error: \(error)")
            }
            else if let user_profile = task.result as? UserProfileToDB {
                likedUserArr = user_profile.likedUsers
                for user in likedUserArr
                {
                    likedUserIDs.append(user)
                }
            }
            return nil
        }).waitUntilFinished()

        print(likedUserIDs)
        print("getLikedUserIDs SUCCESS")
        UIApplication.shared.isNetworkActivityIndicatorVisible = false
        return likedUserIDs
    }
    
    func getMatchedUserIDs(key: String) -> [String]
    {
        UIApplication.shared.isNetworkActivityIndicatorVisible = true
        print("===== getMatchedUserIDs =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        var matchedUserArr = Set<String>()
        var matchedUserIDs: Array = [String]()
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil).continueWith(executor: AWSExecutor.immediate(), block: { (task: AWSTask!) -> AnyObject! in
            if let error = task.error as NSError? {
                print("Error: \(error)")
            }
            else if let user_profile = task.result as? UserProfileToDB {
                matchedUserArr = user_profile.matchedUsers
                for user in matchedUserArr
                {
                    matchedUserIDs.append(user)
                }
            }
            return nil
        }).waitUntilFinished()
        print("getMatchedUserIDs SUCCESS")
        UIApplication.shared.isNetworkActivityIndicatorVisible = false
        return matchedUserIDs
    }
    
    // Call this twice!
    // 1st: (your id, other's id)
    // 2nd: (other's id, your id)
    // if both true, then there is a match
    //JUNPU: fixed
    func findIsMatched(key: String, userID: String) -> Bool
    {
        print("===== findIsMatched =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        var result: Bool = false
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task: AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("Error: \(error)")
            } else if let user_profile = task.result as? UserProfileToDB {
                if (user_profile.likedUsers.contains(userID))
                {
                    result = true
                }
            }
            
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        }).waitUntilFinished()

        print("findIsMatched SUCCESS. result = \(result)")
        return result
    }
    
    //JUNPU: fixed busy waiting
    func insertToMatchedUser(key: String, userID: String)
    {
        print("===== insertToMatchedUser =====")
        let mapper = AWSDynamoDBObjectMapper.default()
        let userProfile = UserProfileToDB()
    
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("InsertError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                userProfile?.userId=key
                userProfile?.displayName = user_profile_addTo.displayName
                userProfile?.bio = user_profile_addTo.bio
                userProfile?.age = user_profile_addTo.age
                userProfile?.gender = user_profile_addTo.gender
                userProfile?.region = user_profile_addTo.region
                userProfile?.device=user_profile_addTo.device
                
                userProfile?.currentLikedMovie = user_profile_addTo.currentLikedMovie
                if (user_profile_addTo.currentLikedMovie.count == 0)
                {
                    userProfile?.currentLikedMovie.insert("mushroom13")
                }
                userProfile?.likedUsers = user_profile_addTo.likedUsers
                if (user_profile_addTo.likedUsers.count == 0)
                {
                    userProfile?.likedUsers.insert("mushroom13")
                }
                userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                if (user_profile_addTo.matchedUsers.count == 0)
                {
                    userProfile?.matchedUsers.insert("mushroom13")
                }
                for movie in (userProfile?.currentLikedMovie)! {
                    print("\(movie)")
                }
                userProfile?.movieCount = user_profile_addTo.movieCount
                userProfile?.email = user_profile_addTo.email
                
                if (!((userProfile?.matchedUsers.contains(userID))!))
                {
                    if (userProfile?.matchedUsers.count != 0 && (userProfile?.matchedUsers.contains("mushroom13"))!) {
                        //dummy exist
                        print("dummy here")
                        userProfile?.matchedUsers.removeAll()
                    }
                    userProfile?.matchedUsers.insert(userID)
                }
                mapper.save(userProfile!)
                print("insertToMatchedUser SECCESS")
                
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })

    }
    
    func deleteFromMatch(key: String, matchId: String)
    {
        //delete chatroom
        let room1 = ChatRoomModel().getChatRoomId(userId: key, recipientId: matchId)
        let room2 = ChatRoomModel().getChatRoomId(userId: key, recipientId: matchId)
        ChatRoomModel().deleteRoom(roomId: room1)
        ChatRoomModel().deleteRoom(roomId: room2)
        print("===== deleteFromMatch =====")
        
        let mapper = AWSDynamoDBObjectMapper.default()
        
        let userProfile = UserProfileToDB()
        
        mapper.load(UserProfileToDB.self, hashKey: key, rangeKey: nil) .continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as NSError? {
                print("loadError: \(error)")
            } else if let user_profile_addTo = task.result as? UserProfileToDB {
                userProfile?.userId=key
                userProfile?.displayName = user_profile_addTo.displayName
                userProfile?.bio = user_profile_addTo.bio
                userProfile?.age = user_profile_addTo.age
                userProfile?.gender = user_profile_addTo.gender
                userProfile?.region = user_profile_addTo.region
                userProfile?.device=user_profile_addTo.device
                userProfile?.likedUsers = user_profile_addTo.likedUsers
                if (user_profile_addTo.likedUsers.count == 0)
                {
                    userProfile?.likedUsers.insert("mushroom13")
                }
                userProfile?.matchedUsers = user_profile_addTo.matchedUsers
                if (user_profile_addTo.matchedUsers.count == 0)
                {
                    userProfile?.matchedUsers.insert("mushroom13")
                }
                userProfile?.currentLikedMovie=user_profile_addTo.currentLikedMovie
                userProfile?.movieCount = user_profile_addTo.movieCount
                userProfile?.email = user_profile_addTo.email

                if (!((userProfile?.matchedUsers.contains(matchId))!))
                {
                    print("error: delete a user not in user's matched list")
                }
                else {
                    _ = userProfile?.likedUsers.remove(matchId)
                    //userProfile?.movieCount = userProfile?.currentLikedMovie.count as NSNumber?
                    //dummy string since empty string set not allowed
                    if (userProfile?.matchedUsers.count == 0) {
                        userProfile?.currentLikedMovie.insert("mushroom13")
                    }
                }

                mapper.save(userProfile!)
                print("deleteFrom match SUCCESS")
            }
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            return nil
        })
    }

    func downloadUserIcon(userID: String) -> URL
    {
        print("===== downloadUserIcon =====")
        let transferManager = AWSS3TransferManager.default()
        let downloadingFileURL = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(userID)
        
        let downloadRequest = AWSS3TransferManagerDownloadRequest()
        downloadRequest?.bucket = "testprofile-meetzam"
        downloadRequest?.key = userID + ".jpeg"
        downloadRequest?.downloadingFileURL = downloadingFileURL
        
        transferManager.download(downloadRequest!).continueWith(executor: AWSExecutor.immediate(), block: { (task:AWSTask!) -> AnyObject! in
            if let error = task.error as? NSError {
                print("download Error: \(error)")
                return nil
            } else {
                print("downloadUserIcon SUCCESS")
            }
            return nil
        })
        return downloadingFileURL
    }
 
    //mushroom
    func getDeviceArn() -> String? {
        
        let pushManager = AWSPushManager()
        
        if let _endpointARN = pushManager.endpointARN {
            return _endpointARN
        }else{
            print("failed to get endpoint arn")
            pushManager.registerForPushNotifications()
        }
        return nil
    }
    
    
}
