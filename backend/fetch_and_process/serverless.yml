
service: dataFetching

frameworkVersion: "=1.11.0"

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: Allow
      Action: "DynamoDB:*"
      Resource: "arn:aws:dynamodb:us-east-1:397508666882:table/test_table" 

    - Effect: Allow
      Action: "DynamoDB:*"
      Resource: "arn:aws:dynamodb:us-east-1:397508666882:table/test_history"  

    - Effect: Allow
      Action: "DynamoDB:*"
      Resource: "arn:aws:dynamodb:us-east-1:397508666882:table/movie_upcoming"    

    - Effect: Allow
      Action: "DynamoDB:*"
      Resource: "arn:aws:dynamodb:us-east-1:397508666882:table/movie_table" 

    - Effect: Allow
      Action: "DynamoDB:*"
      Resource: "arn:aws:dynamodb:us-east-1:397508666882:table/movie_history"   

    - Effect: Allow
      Action: "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:*"

custom: ${file(./credentials.json)}

functions:
  
  # getters

  getLocalMovies:
    handler: getLocalMovies.handler
    name: getLocalMovies-${self:provider.stage}
    description: this function calls TMS api movie playing in local theatra, pass zipcode and current date as parameters and fetch general data about movie that currentlly playing in local theaters, including showtime information.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    environment:
      Gracenote_API_key: ${self:custom.Gracenote_API_key}

  getOneMovie:
    handler: getOneMovie.handler
    name: getOneMovie-${self:provider.stage}
    description: this function calls TMDB api search/movie pass movie title and release year as parameters and fetch general data about the movie.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    environment:
      TMDB_API_key: ${self:custom.TMDB_API_key}    

  getTrailer:   
    handler: getTrailer.handler
    name: getTrailer-${self:provider.stage}
    description: this function calls TMDB api movie/video pass imdb_id as parameter and fetch movie trailer data about movie.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    environment:
      TMDB_API_key: ${self:custom.TMDB_API_key} 

  getMovieComments:
    handler: getMovieComments.handler
    name: getMovieComments-${self:provider.stage}
    description: fetch movie's public reviews for movies
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    environment:
      TMDB_API_key: ${self:custom.TMDB_API_key} 

  getUpcomingMovies:
    handler: getUpcomingMovies.handler
    name: getUpcomingMovies-${self:provider.stage}
    description: Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    environment:
      TMDB_API_key: ${self:custom.TMDB_API_key}  

  # database operations

  # Step 1
  markAllMovieAsHistory:
    handler: markAllMovieAsHistory.handler
    name: markAllMovieAsHistory-${self:provider.stage}
    description: scan movie_table and mark every movie as 'history'.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(0 10 * * ? *)

  # Step 2
  updateCurrentPlayingMovie:
    handler: updateCurrentPlayingMovie.handler
    name: updateCurrentPlayingMovie-${self:provider.stage}
    description: invoke getLocalMovies and update movie_table.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(1 10 * * ? *)

  # Step 3
  addHistoryMoviesToMovieHistoryTable:     
    handler: addHistoryMoviesToMovieHistoryTable.handler
    name: addHistoryMoviesToMovieHistoryTable-${self:provider.stage}
    description: add history movies to movie_history table.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(2 10 * * ? *)

  # Step 4
  deleteHistoryMovies:    
    handler: deleteHistoryMovies.handler
    name: deleteHistoryMovies-${self:provider.stage}
    description: delete history movies from movie_table.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(3 10 * * ? *)

  # Step 5
  addTmdbidAndPosterPath:
    handler: addTmdbidAndPosterPath.handler
    name: addTmdbidAndPosterPath-${self:provider.stage}
    description: update movie_table for tmdb_id and poster_path.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(4 10 * * ? *)

  # Step 6
  deleteIdLessMovies:
    handler: deleteIdLessMovies.handler   
    name: deleteIdLessMovies-${self:provider.stage}
    description: scan movie_table and delete movies that doesn't have tmdb_id.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(5 10 * * ? *)
    
  # Step 7
  deletePosterLessMovies:
    handler: deletePosterLessMovies.handler   
    name: deletePosterLessMovies-${self:provider.stage}
    description: scan movie_table and delete movies that doesn't have poster_path.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6    
    events:  
      - schedule: cron(6 10 * * ? *)

  # Step 8, note: this can be executed in parallel with Step 7.
  addTrailerKey:
    handler: addTrailerKey.handler
    name: addTrailerKey-${self:provider.stage}
    description: update movie_table for trailer_key.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(7 10 * * ? *)

  # Step 9
  
  addComments:    
    handler: addComments.handler
    name: addComments-${self:provider.stage}
    description: update movie_table for movie comments
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(7 10 * * ? *)

  # Step 9
  checkTrailerKeyAvailability:
    handler: checkTrailerKeyAvailability.handler
    name: checkTrailerKeyAvailability-${self:provider.stage}
    description: scan movie_table and check availability of trailer_key. For those movies that doesn't have a trailer_key, mark trailer_key as "unavailable".
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(8 10 * * ? *)

  # Step 10 
  addUpcoming:    
    handler: addUpcoming.handler
    name: addUpcoming-${self:provider.stage}
    description: update upcomming movies in movie_upcoming table
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(9 10 * * ? *) 

  # Step 11
  addUpcomingTrailerKey:
    handler: addUpcomingTrailerKey.handler
    name: addUpcomingTrailerKey-${self:provider.stage}
    description: update movie_upcming for trailer_key.
    runtime: nodejs6.10
    memorySize: 128
    timeout: 6
    events:  
      - schedule: cron(10 10 * * ? *) 





  


    








